#!/usr/bin/env python3
"""
Codex AI Dev Agent - Python implementation using OpenAI GPT-4o and PyGithub.
Scans /specs/*.md, generates code, and opens a PR.
"""
import os
import glob
import re
import textwrap
import datetime
import sys
from pathlib import Path
import time
from openai import OpenAI
from github import Github

# Set up OpenAI API key if not already set in environment
if not os.getenv("OPENAI_API_KEY"):
    print("Missing OPENAI_API_KEY")
    sys.exit(1)

client = OpenAI()

token = os.getenv("GITHUB_TOKEN")
if not token:
    print("Missing GITHUB_TOKEN")
    sys.exit(1)

repo_name = os.getenv("GITHUB_REPOSITORY")
if not repo_name:
    print("Missing GITHUB_REPOSITORY")
    sys.exit(1)


g = Github(token)


def get_repo_with_retry(client, name, retries=5):
    for attempt in range(retries):
        try:
            return client.get_repo(name)
        except Exception as e:
            print(f"Attempt {attempt+1} failed: {e}")
            time.sleep(2**attempt)
    print("Unable to connect to GitHub after retries.")
    sys.exit(1)


repo = get_repo_with_retry(g, repo_name)


def slugify(text: str) -> str:
    return re.sub(r"[^a-zA-Z0-9-]+", "-", text.lower())[:50].strip("-")


spec_files = glob.glob("specs/*.md")
if not spec_files:
    print("No spec files found.")
    sys.exit(0)

for spec_path in spec_files:
    spec_content = Path(spec_path).read_text()
    spec_slug = slugify(Path(spec_path).stem)
    branch_name = f"{spec_slug}-codex"

    # Check if base branch exists
    try:
        base = repo.get_branch("main")
    except Exception as e:
        print("Base branch 'main' not found:", e)
        sys.exit(1)

    # Skip if branch already exists
    try:
        repo.get_branch(branch_name)
        print(f"Branch {branch_name} already exists, skipping.")
        continue
    except Exception:
        pass

    # Create branch off main
    repo.create_git_ref(ref=f"refs/heads/{branch_name}", sha=base.commit.sha)

    # Ask GPT‑4o to generate code
    messages = [
        {"role": "system", "content": "You are an expert full‑stack developer."},
        {
            "role": "user",
            "content": f"Generate production‑ready code for the following spec:\n\n{spec_content}",
        },
    ]
    try:
        response = client.chat.completions.create(model="gpt-4o", messages=messages)
        ai_output = response.choices[0].message.content
    except Exception as e:
        print("Error communicating with OpenAI:", e)
        continue

    # Extract code blocks (first line = file path)
    code_blocks = re.findall(r"```(?:[a-zA-Z0-9]*\n)?(.*?)```", ai_output, re.S)
    if not code_blocks:
        print("No code blocks returned from GPT‑4o.")
        continue

    for block in code_blocks:
        lines = block.strip().splitlines()
        if not lines:
            continue
        file_path = lines[0].strip()
        if not file_path or ".." in file_path or file_path.startswith("/"):
            print(f"Skipping potentially unsafe or blank file path: {file_path}")
            continue
        file_body = "\n".join(lines[1:])
        # Check if file already exists in branch
        try:
            repo.get_contents(file_path, ref=branch_name)
            print(f"File {file_path} already exists in {branch_name}, skipping.")
            continue
        except Exception:
            pass
        try:
            repo.create_file(
                path=file_path,
                message=f"feat({spec_slug}): add {file_path}",
                content=file_body,
                branch=branch_name,
            )
        except Exception as e:
            print(f"Error creating file {file_path}:", e)
            continue

    # Open PR
    pr_body = textwrap.dedent(
        f"""
    ### Spec

    ```
    {spec_content}
    ```

    _Generated by Codex Dev Agent on {datetime.datetime.utcnow().isoformat()}Z_
    """
    )

    try:
        pr = repo.create_pull(
            title=f"feat: {spec_slug} [Codex-generated]",
            body=pr_body,
            head=branch_name,
            base="main",
        )
        pr.add_to_labels("Codex-generated")
        print(f"Opened PR #{pr.number} for {spec_path}")
    except Exception as e:
        print(f"Error creating PR for {spec_path}:", e)
