-- Enable UUID generation extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Users profile table
CREATE TABLE IF NOT EXISTS user_profiles (
  user_id uuid PRIMARY KEY REFERENCES auth.users(id),
  full_name text,
  company_name text,
  is_admin boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc', now()),
  updated_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Products table
CREATE TABLE IF NOT EXISTS products (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  name text NOT NULL,
  description text,
  price decimal(10,2) NOT NULL,
  original_price decimal(10,2),
  price_id text NOT NULL,
  category text,
  features text,
  image_url text,
  is_active boolean DEFAULT true,
  is_featured boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc', now()),
  updated_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Orders table
CREATE TABLE IF NOT EXISTS orders (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id),
  product_id uuid REFERENCES products(id),
  stripe_session_id text UNIQUE,
  customer_email text,
  amount decimal(10,2) NOT NULL,
  status text NOT NULL DEFAULT 'pending',
  created_at timestamp with time zone DEFAULT timezone('utc', now()),
  fulfilled_at timestamp with time zone,
  updated_at timestamp with time zone
);

-- Support tickets table
CREATE TABLE IF NOT EXISTS support_tickets (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id),
  subject text NOT NULL,
  description text,
  status text DEFAULT 'open',
  created_at timestamp with time zone DEFAULT timezone('utc', now()),
  updated_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Digital product files table
CREATE TABLE IF NOT EXISTS product_files (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  product_id uuid REFERENCES products(id),
  file_name text NOT NULL,
  file_url text NOT NULL,
  file_size integer,
  file_type text,
  created_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Secure downloads table for issued download tokens
CREATE TABLE IF NOT EXISTS downloads (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  order_id uuid REFERENCES orders(id),
  product_file_id uuid REFERENCES product_files(id),
  user_id uuid REFERENCES auth.users(id),
  download_token text NOT NULL,
  expires_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Email templates table
CREATE TABLE IF NOT EXISTS email_templates (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  name text UNIQUE NOT NULL,
  subject text NOT NULL,
  html_content text NOT NULL,
  text_content text,
  variables text[] DEFAULT ARRAY[]::text[],
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT timezone('utc', now()),
  updated_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Email logs table
CREATE TABLE IF NOT EXISTS email_logs (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  to_email text,
  template text,
  subject text,
  status text,
  message_id text,
  error text,
  created_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- AI prompts table
CREATE TABLE IF NOT EXISTS prompts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  version int NOT NULL DEFAULT 1,
  content text NOT NULL,
  category text,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT timezone('utc', now()),
  updated_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Copilot chat messages table for AI assistant conversation history
CREATE TABLE IF NOT EXISTS copilot_messages (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id text NOT NULL,
  user_id uuid REFERENCES auth.users(id),
  role text CHECK (role IN ('user','assistant')),
  content text,
  created_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Roof analysis results table
CREATE TABLE IF NOT EXISTS roof_analyses (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  image_url text,
  analysis_type text,
  ai_model text,
  ai_response jsonb,
  confidence_score numeric,
  created_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Blog posts table (for CMS/blog functionality)
CREATE TABLE IF NOT EXISTS blog_posts (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  slug text UNIQUE NOT NULL,
  title text NOT NULL,
  excerpt text,
  content text NOT NULL,
  author text NOT NULL DEFAULT 'Mike Woodworth',
  category text,
  image_url text,
  published boolean DEFAULT false,
  published_at timestamp with time zone,
  read_time text DEFAULT '5 min read',
  created_at timestamp with time zone DEFAULT timezone('utc', now()),
  updated_at timestamp with time zone DEFAULT timezone('utc', now())
);

-- Ensure new columns exist on orders (fulfilled_at, updated_at) and products (is_featured)
ALTER TABLE orders ADD COLUMN IF NOT EXISTS fulfilled_at timestamp with time zone;
ALTER TABLE orders ADD COLUMN IF NOT EXISTS updated_at timestamp with time zone DEFAULT timezone('utc', now());
ALTER TABLE products ADD COLUMN IF NOT EXISTS is_featured boolean DEFAULT false;

-- Create storage buckets for product files, roof images, and reports
INSERT INTO storage.buckets (id, name, public) VALUES 
  ('product-files', 'product-files', false)
ON CONFLICT (id) DO NOTHING;
INSERT INTO storage.buckets (id, name, public) VALUES 
  ('roof-images', 'roof-images', true)
ON CONFLICT (id) DO NOTHING;
INSERT INTO storage.buckets (id, name, public) VALUES 
  ('reports', 'reports', false)
ON CONFLICT (id) DO NOTHING;

-- Storage access policies
-- Allow authenticated users to upload to roof-images bucket
CREATE POLICY "Authenticated users can upload roof images"
ON storage.objects FOR INSERT
TO authenticated
USING (bucket_id = 'roof-images');
-- Allow users to view their own roof images (if path structured with user_id folder, else bucket is public so not needed)
CREATE POLICY "Users can view their own roof images"
ON storage.objects FOR SELECT
TO authenticated
USING (bucket_id = 'roof-images' AND auth.uid()::text = (storage.foldername(name))[1]);
-- Allow service role full access to product-files and reports
CREATE POLICY "Service role can access product files"
ON storage.objects FOR ALL
TO service_role
USING (bucket_id IN ('product-files', 'reports'));

-- Enable Row Level Security where appropriate
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE blog_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE support_tickets ENABLE ROW LEVEL SECURITY;

-- RLS policies for tables
CREATE POLICY "Products are viewable by everyone"
ON products FOR SELECT
USING (is_active = true);
CREATE POLICY "Orders are viewable by owner"
ON orders FOR SELECT
USING (auth.uid() = user_id);
CREATE POLICY "Tickets are viewable by owner"
ON support_tickets FOR SELECT
USING (auth.uid() = user_id);
CREATE POLICY "Published blog posts are viewable by everyone"
ON blog_posts FOR SELECT
USING (published = true);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_products_category ON products(category);
CREATE INDEX IF NOT EXISTS idx_products_active ON products(is_active);
CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(user_id);
CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_tickets_status ON support_tickets(status);
CREATE INDEX IF NOT EXISTS idx_downloads_token ON downloads(download_token);
CREATE INDEX IF NOT EXISTS idx_blog_posts_slug ON blog_posts(slug);
CREATE INDEX IF NOT EXISTS idx_blog_posts_published ON blog_posts(published, published_at DESC);

-- Analytics helper function: calculate monthly revenue between two dates
CREATE OR REPLACE FUNCTION calculate_monthly_revenue(start_date date, end_date date)
RETURNS TABLE(month text, revenue numeric) AS $$
BEGIN
  RETURN QUERY
  SELECT TO_CHAR(created_at, 'YYYY-MM') AS month,
         SUM(amount) AS revenue
  FROM orders
  WHERE created_at >= start_date AND created_at <= end_date AND status = 'completed'
  GROUP BY 1
  ORDER BY 1;
END;
$$ LANGUAGE plpgsql;

-- Trigger function to auto-update updated_at on row modifications
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Attach trigger to tables that require updated_at maintenance
CREATE TRIGGER trig_update_user_profiles_updated BEFORE UPDATE ON user_profiles
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trig_update_products_updated BEFORE UPDATE ON products
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trig_update_orders_updated BEFORE UPDATE ON orders
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trig_update_support_tickets_updated BEFORE UPDATE ON support_tickets
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trig_update_email_templates_updated BEFORE UPDATE ON email_templates
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER trig_update_prompts_updated BEFORE UPDATE ON prompts
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Promote initial admin users based on email
UPDATE user_profiles
SET is_admin = true
WHERE user_id IN (
  SELECT id FROM auth.users 
  WHERE email IN ('admin@example.com')
);
