#!/usr/bin/env python3
"""
Codex AI Dev Agent - Python implementation using OpenAI GPT-4o and PyGithub.
Scans /specs/*.md, generates code, and opens a PR.
"""
import os, glob, re, textwrap, datetime, sys
from pathlib import Path

from openai import OpenAI
client = OpenAI()
from github import Github

#.api_key = os.getenv("OPENAI_API_KEY")

token = os.getenv("GITHUB_TOKEN")
if not token:
    print("Missing GITHUB_TOKEN")
    sys.exit(1)

g = Github(token)
repo_name = os.getenv("GITHUB_REPOSITORY")
repo = g.get_repo(repo_name)

def slugify(text: str) -> str:
    return re.sub(r"[^a-zA-Z0-9-]+", "-", text.lower())[:50].strip("-")

spec_files = glob.glob("specs/*.md")
if not spec_files:
    print("No spec files found.")
    sys.exit(0)

for spec_path in spec_files:
    spec_content = Path(spec_path).read_text()
    spec_slug = slugify(Path(spec_path).stem)
    branch_name = f"{spec_slug}-codex"
    base = repo.get_branch("main")

    # Skip if branch already exists
    try:
        repo.get_branch(branch_name)
        print(f"Branch {branch_name} already exists, skipping.")
        continue
    except Exception:
        pass

    # Create branch off main
    repo.create_git_ref(ref=f"refs/heads/{branch_name}", sha=base.commit.sha)

    # Ask GPT‑4o to generate code
    messages = [
        {"role": "system", "content": "You are an expert full‑stack developer."},
        {"role": "user", "content": f"Generate production‑ready code for the following spec:\n\n{spec_content}"}
    ]
   response = client.chat.completions.create(model="gpt-4o", messages=messages)
ai_output = response.choices[0].message["content"]
    ai_output = response.choices[0].message["content"]

    # Extract code blocks (first line = file path)
    code_blocks = re.findall(r"```(?:[a-zA-Z0-9]*\n)?(.*?)```", ai_output, re.S)
    if not code_blocks:
        raise RuntimeError("No code blocks returned from GPT‑4o.")

    for block in code_blocks:
        lines = block.strip().splitlines()
        if not lines:
            continue
        file_path = lines[0].strip()
        file_body = "\n".join(lines[1:])
        repo.create_file(
            path=file_path,
            message=f"feat({spec_slug}): add {file_path}",
            content=file_body,
            branch=branch_name
        )

    # Open PR
    pr_body = textwrap.dedent(f"""
    ### Spec

    ```
    {spec_content}
    ```

    _Generated by Codex Dev Agent on {datetime.datetime.utcnow().isoformat()}Z_
    """)

    pr = repo.create_pull(
        title=f"feat: {spec_slug} [Codex-generated]",
        body=pr_body,
        head=branch_name,
        base="main"
    )
    pr.add_to_labels("Codex-generated")
    print(f"Opened PR #{pr.number} for {spec_path}")
